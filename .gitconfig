[user]
  name = Denis Ciccale
  email = dciccale@gmail.com

[github]
  user = dciccale

[core]
  excludesfile = ~/.gitignore
  editor = vim -f
  quotepath = false
  precomposeunicode = true
  autocrlf = input

[color]
  ui = always

[merge]
  tool = mvim -d

[diff]
  tool = mvimdiff

[difftool "mvimdiff"]
  prompt = false
  cmd = mvim -f -d \"$LOCAL\" \"$REMOTE\"

[color "status"]
  added = green
  changed = yellow
  untracked = cyan

[color "branch"]
  current = magenta
  local = white
  remote = cyan

[push]
  default = current

[pull]
  default = current

[alias]
  # CLONE {{{
  # ----

  cl = clone
  clr = clone --recursive

  # }}}

  # LOG {{{
  # ---

  # log git history tree graph
  l = log --graph --decorate

  # log edited files per commit
  ll = log --pretty=format:'%C(yellow)%h%C(red)%d %C(reset)%s%C(blue) [%cn]' --decorate --numstat

  # log (hash - relative date - commit - commiter)
  ld = log --pretty=format:'%C(yellow)%h %C(bold red)%ad%C(reset)%C(red)%d %C(reset)%s%C(blue) [%cn]' --decorate --date=relative

  # }}}

  # DIFF {{{
  # ----

  # show word diff in the same line
  dif = diff --word-diff

  # show conflicts only
  diffc = diff --name-only --diff-filter=U

  # show cached diff
  diffca = diff --cached

  # }}}

  # SEARCH {{{
  # ------

  # find a file path
  f = !git ls-files | grep -i

  # search/grep the entire codebase for a string
  grep = grep -Ii

  # }}}

  # STATUS {{{
  # ------

  s = status -sb

  # hide untracked files
  su = status -sbuno

  # }}}

  # COMMIT {{{
  # ------

  # amend commit
  coam = commit --amend

  # commit with message
  cm = commit -m
  cam = commit -am

  # commit everything
  caam = !git add . && git commit -am

  # undo commit
  unc = reset --soft HEAD^

  cp = cherry-pick

  # }}}

  # CHECKOUT {{{
  # --------

  ch = checkout
  cho = !sh -c 'git checkout --orphan $0 && git rm --cache -r .'

  # some shortucs to checkout common branches
  chp = checkout gh-pages
  chm = checkout master
  chd = checkout develop
  chw = checkout web

  # }}}
  #
  # FETCH/CHECKOUT {{{
  # --------

  # checkout remote branch
  chr = !sh -c 'git fetch $0 $1 && git checkout $1'

  # }}}

  # BRANCHES {{{
  # --------

  br = branch

  # delete local branch
  brd = branch -D

  # delete remote branch
  brdr = !git push origin --delete

  # rename the current branch
  # usage: git rename new_branch_name
  rename = !git branch -m \"$(git rev-parse --abbrev-ref HEAD)\"

  # }}}

  # push/pull {{{
  # ---------

  ph = push origin
  hh = push heroku master
  pl = pull origin
  pls = submodule foreach git pull

  unstage = reset HEAD

  # fetch and rebase
  # if no arguments passed, the command will execute
  # git fetch origin <current-branch>
  # git rebase origin/<current-branc>
  # usage:
  # git get
  # or
  # git get someOrigin someBranch
  get = "!f() { o=origin && (($#)) && o=$1; b=$(git rev-parse --abbrev-ref HEAD) && (($#>1)) && b=$2; (git fetch $o $b && git rebase $o/$b) }; f"

  # }}}

  # STASH {{{
  # -----

  sh = "!f() { !(($#)) && git stash || (git stash push -m \"$1\")}; f"
  shl = stash list
  unsh = "!f() { !(($#)) && git stash pop || (git stash pop stash@{$1})}; f"

  # if no arguments clear the stash
  # or drop multiple stashes passing the numbers
  # usage: git shd 2 5 6 9
  shd = "!f() { !(($#)) && git stash clear || for ((i=1;i<=$#;i++)); do n=$((${!i}+1-$i)); git stash drop stash@{$n} & done; wait; }; f"

  # show specified stash changes
  # usage: git shs 3
  shs = !sh -c 'git stash show -p stash@{$0}'

  # }}}


  # REMOTE {{{
  # ------

  r = remote
  rv = remote -v
  ra = remote add

  # }}}

  # quick ignore {{{
  ignore = !([ ! -e .gitignore ] && touch .gitignore) | echo >> .gitignore

  # add all files and untrack locally deleted files
  addrm = !git add -A && git ls-files -d -z | xargs -0 git rm

  # git untrack locally deleted files
  untrack = !git ls-files -d -z | xargs -0 git rm

  # }}}


  # REBASE {{{
  # ------

  rb = !sh -c 'git rebase -i HEAD~$0'

  # }}}

  # MISC {{{
  # ----

  # jump to specify branch but first doing a git stash
  goto = !git stash --quiet && git checkout $1 | printf '\n\n'$(tput setaf 4) && printf '\n\n' $(tput sgr0)

  # get list of committers without including merge commits
  committers = shortlog -nse --no-merges

  # init a git repository in github
  initgh = !git init && git add . && git commit -am 'Initial commit' && git remote add origin git@github.com:dciccale/$(basename $PWD).git && git push -u origin master

  # }}}

  # project specific {{{
  # ----------------

  # set my personal username and email
  dciccale = !git config user.name dciccale && git config user.email dciccale@gmail.com

  # }}}

# URL SHORTCUTS {{{
# -------------

[url "http://github.com/"]
  insteadOf = "gh:"

# [url "git@github.com:"]
#   insteadOf = "https://github.com/"
#   insteadOf = "http://github.com/"
#   insteadOf = "gh:"

[url "git@github.com:dciccale/"]
  insteadOf = "gd:"

[url "http://github.com/dciccale/"]
  insteadOf = "gd:"

# }}}
